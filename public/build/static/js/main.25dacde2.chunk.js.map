{"version":3,"sources":["firebase.js","Todo.js","App.js","serviceWorker.js","reducer.js","StateProvider.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","db","firestore","GoogleAuthProvider","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","Todo","props","classes","useState","open","setOpen","input","setInput","Modal","onClose","e","className","placeholder","passedTodo","todo","value","onChange","event","target","Button","onClick","collection","doc","id","set","merge","List","ListItem","ListItemAvatar","ListItemText","primary","secondary","index","delete","App","todos","setTodos","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","FormControl","InputLabel","Input","disabled","type","preventDefault","add","timestamp","FieldValue","serverTimestamp","variant","color","Boolean","window","location","hostname","match","reducer","state","action","user","StateContext","createContext","StateProvider","initialState","children","Provider","useReducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.25dacde2.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCNOH4ZIhHZbWIKhFCj6j1IDnR1uXBmbe0\",\r\n  authDomain: \"todoapp-pulkit.firebaseapp.com\",\r\n  databaseURL: \"https://todoapp-pulkit.firebaseio.com\",\r\n  projectId: \"todoapp-pulkit\",\r\n  storageBucket: \"todoapp-pulkit.appspot.com\",\r\n  messagingSenderId: \"502694633323\",\r\n  appId: \"1:502694633323:web:705a3c57562adb0c15362e\",\r\n  measurementId: \"G-T2HLKLLP7S\",\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nexport const auth = firebase.auth();\r\nconst db = firebase.firestore();\r\nexport const GoogleProvider = new firebase.auth.GoogleAuthProvider();\r\nexport default db;\r\n","import {\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n  Modal,\r\n} from \"@material-ui/core\";\r\nimport { Button, List } from \"@material-ui/core\";\r\nimport \"./Todo.css\";\r\nimport React, { useState } from \"react\";\r\nimport db from \"./firebase\";\r\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SelectInput from \"@material-ui/core/Select/SelectInput\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: \"absolute\",\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nfunction Todo(props) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const updateTodo = () => {\r\n    db.collection(\"todos\").doc(props.passedTodo.id).set(\r\n      {\r\n        todo: input,\r\n      },\r\n      { merge: true }\r\n    );\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const deleteMe = (event) => {\r\n    db.collection(\"todos\").doc(props.passedTodo.id).delete();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal open={open} onClose={(e) => setOpen(false)}>\r\n        <div className={classes.paper}>\r\n          <h1>Edit Task</h1>\r\n          <input\r\n            placeholder={props.passedTodo.todo}\r\n            value={input}\r\n            onChange={(event) => setInput(event.target.value)}\r\n          />\r\n          <Button onClick={updateTodo}>Update Todo</Button>\r\n        </div>\r\n      </Modal>\r\n      <List className=\"todo__list\">\r\n        <ListItem>\r\n          <ListItemAvatar></ListItemAvatar>\r\n          <ListItemText\r\n            primary={props.passedTodo.todo}\r\n            secondary={`Task ${props.index + 1}`}\r\n          />\r\n        </ListItem>\r\n        <Button onClick={(e) => setOpen(true)}>EDIT</Button>\r\n        <DeleteForeverIcon onClick={deleteMe}>DELELTE ME</DeleteForeverIcon>\r\n      </List>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import React, { useEffect, useState } from \"react\";\nimport { Button, FormControl, Input, InputLabel } from \"@material-ui/core\";\nimport \"./App.css\";\nimport Todo from \"./Todo\";\nimport db from \"./firebase\";\nimport firebase from \"firebase\";\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState(\"\");\n\n  useEffect(() => {\n    db.collection(\"todos\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        setTodos(\n          snapshot.docs.map((doc) => ({ id: doc.id, todo: doc.data().todo }))\n        );\n      });\n  }, []);\n  //const timestamp = firebase.firestore.FieldValue.serverTimestamp();\n\n  // console.log(timestamp);\n\n  const addTodo = (event) => {\n    event.preventDefault();\n\n    db.collection(\"todos\").add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n    });\n\n    setInput(\"\");\n  };\n\n  // const timestamp = new Date(timestamp?.toDate()).toUTCString();\n  return (\n    <div className=\"App\">\n      <h1>Your To-Do List </h1>\n\n      <form>\n        <FormControl>\n          <InputLabel>âœ… Write A To-do</InputLabel>\n          <Input\n            value={input}\n            onChange={(event) => setInput(event.target.value)}\n          />\n        </FormControl>\n\n        <Button\n          disabled={!input}\n          type=\"submit\"\n          onClick={addTodo}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Add Todo\n        </Button>\n      </form>\n      <ul>\n        {todos.map((todo, index) => (\n          <Todo passedTodo={todo} index={index} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","export const initialState = {\r\n  user: null,\r\n};\r\n\r\n// Selector\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"SET_USER\":\r\n      return {\r\n        ...state,\r\n        user: action.user,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React, { createContext, useContext, useReducer } from \"react\";\r\n\r\n// Prepares the dataLayer\r\nexport const StateContext = createContext();\r\n\r\n// Wrap our app and provide the Data layer\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n    {children}\r\n  </StateContext.Provider>\r\n);\r\n\r\n// Pull information from the data layer\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport reducer, { initialState } from \"./reducer\";\nimport { StateProvider } from \"./StateProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}